<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="dist" name="OffRoad">

	<property name="ver" value="0.2"/>
	<property name="src" location="src"/>
	<property name="res" location="res"/>
	<property name="lib" location="lib"/>
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="dist.lib" location="${dist}/lib" />
	<property name="OffRoad.jar" location="${dist}/OffRoad.jar"/>
	<property name="java_source_version" value="1.8" />
	<property name="java_target_version" value="1.8" />
	<property name="build.compiler" value="modern" />
	<property name="start.class" value="net.sourceforge.offroad.OsmWindow" />
	<property name="post" location="post" />

	<path id="build-classpath">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init">
		<echo>OffRoad version = ${ver}.</echo>
	</target>

	<target name="build" depends="init">
		<mkdir dir="${build}"/>
		<javac includeantruntime="false" srcdir="${src}"
			destdir="${build}"
			debug="true"
    	   source="${java_source_version}"
	       target="${java_target_version}"
			encoding="utf-8"
			 >
			<classpath refid="build-classpath">
			</classpath>
		</javac>
		<exec executable="git" outputproperty="hash"><arg line="rev-parse HEAD"/></exec>
		<echo file="${build}/version.properties" message="version=${ver}">
hash=${hash}		
		</echo>
	</target>

	<target name="jar" depends="build">
		<mkdir dir="${dist.lib}" />
		<jar destfile="${dist.lib}/Resources.jar">
			<zipfileset dir="${res}" includes="**" excludes="installer/**"/>
		</jar>
		<!-- third party libs -->
		<copy todir="${dist.lib}">
			<fileset dir="${lib}">
				<include name="commons-logging-1.1.1.jar"/>
				<include name="gnu-trove-osmand.jar"/>
				<include name="junidecode-0.1.jar"/>
				<include name="json-20090211.jar"/>
				<include name="kxml2-2.3.0.jar"/>
				<include name="bzip2.jar"/>
				<include name="sqlite-jdbc-3.8.11.2.jar"/>
				<include name="commons-lang3-3.4.jar"/>
			</fileset>
		</copy>
		<tempfile prefix="manifest" property="temp.manifest.file"/>
		<path id="jar-classpath">
			<fileset dir="${dist.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${dist}">
				<include name="*.jar"/>
			</fileset>
		</path>
		<manifestclasspath property="lib.list" jarfile="${OffRoad.jar}">
			<classpath refid="jar-classpath"/>
		</manifestclasspath>

		<manifest file="${temp.manifest.file}">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Built-Number" value="${ver}" />
			<attribute name="Created-By" value="OsmAnd team and Christian Foltin" />
			<attribute name="Main-Class" value="${start.class}" />
			<!--			<attribute name="Class-Path" value="OffRoad.jar . lib/commons-logging-1.1.1.jar lib/gnu-trove-osmand.jar lib/junidecode-0.1.jar lib/kxml2-2.3.0.jar lib/Resources.jar lib/commons-lang3-3.4.jar"/> -->
			<attribute name="Class-Path" value="${lib.list}"/>
		</manifest>
		<exec command="cat">
			<arg  value="${temp.manifest.file}"/>
		</exec>
		<jar jarfile="${OffRoad.jar}"
		     manifest="${temp.manifest.file}"
			update="true">
			<fileset dir="${build}">
			</fileset>
			<fileset dir="${src}">
				<include name="**/*.xslt"/>
			</fileset>
		</jar>
		<delete file="${temp.manifest.file}" failonerror="false"/>
	</target>

	<target name="dist" depends="jar">
		<copy todir="${dist}">
			<fileset dir=".">
				<include name="LICENSE"/>
			</fileset>
		</copy>

	</target>


	<target name="run" depends="dist">
		<condition property="vmarg" value="NODPI">
			<not>
				<isset property="vmarg"/>
			</not>
		</condition>
		<echo message="vmarg: ${vmarg}">
		</echo>
		<java fork="yes" dir="${dist}" spawn="false" failonerror="false" maxmemory="1024M" jar="${OffRoad.jar}">
			<!-- <jvmarg line="- -add-modules java.se.ee" /> -->
			<jvmarg value="-D${vmarg}=true" />
			<!--	<jvmarg value="-Djava.util.logging.config.file=commons-logging.properties" /> -->
		</java>
	</target>

	<target name="runh">
		<property name="vmarg" value="HIDPI" >
		</property>
		<antcall target="run" inheritall="true">
		</antcall>
	</target>

	<target name="post" depends="dist">
		<mkdir dir="${post}/${ver}" />
		<zip destfile="${post}/${ver}/OffRoad-bin-${ver}.zip" includes="lib/*.jar,*.jar,LICENSE" basedir="${dist}">
		</zip>
		<copy todir="${post}/${ver}">
			<fileset dir=".">
				<include name="readme.txt"/>
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete dir="${post}/${ver}/"  quiet="true"/>
	</target>

	<target name="release" depends="installers_chris">
		<echo message="Test for readme.txt for containing ${ver}">
		</echo>
		<loadfile property="test.readme.updated" srcfile="readme.txt">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="${ver}" />
				</linecontainsregexp>
			</filterchain>
		</loadfile>

		<fail unless="test.readme.updated" message="readme.txt not updated to version ${ver}." />

		<echo message="SCP to ${ver}">
		</echo>
		<exec command="scp">
			<arg value="-r" />
			<arg value="-v" />
			<arg value="${post}/${ver}" />
			<arg value="christianfoltin,offroadosm@frs.sourceforge.net:/home/frs/project/o/of/offroadosm/OffRoad_Unstable/." />
		</exec>
		<echo message="git tag ${ver}">
		</echo>
		<exec command="git">
			<arg value="tag"/>
			<arg value="${ver}"/>
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: create_windows_installer                      
         - - - - - - - - - - - - - - - - - -->
	<target name="create_windows_installer">
		<ant dir="${inst.windows.installer}" target="${inst.windows.variant}">
		</ant>
		<exec dir="${inst.windows.installer}" executable="wine" os="Linux">
			<arg value="/home/foltin/.wine/drive_c/Programme/Inno Setup 5/ISCC.exe"/>
			<arg value="offroad.iss"/>
		</exec>
		<exec dir="${inst.windows.installer}" executable="wine" os="Mac OS X">
			<arg value="/Users/foltin/.wine/drive_c/Programme/Inno Setup 5/ISCC.exe"/>
			<arg value="offroad.iss"/>
		</exec>
	</target>

	<!-- =================================
          target: installers, for Chris' computers
         ================================= -->
	<target name="installers_chris" depends="" description="--> Creates all installers. This is a task that only works on Chris laptops. But it should be informative to others who want to build the installers">
		<property name="gitRoot" value="git://git.code.sf.net/p/offroadosm/code"/>
		<property name="macName" value="mahler.local"/>

		<property name="inst.dir" location="/tmp/fm_installer"/>
		<property name="inst.dest.dir" location="${post}/${ver}"/>
		<property name="inst.windows.installer" location="${inst.dir}/res/installer/windows"/>
		<mkdir dir="${inst.dest.dir}"/>
		<delete dir="${inst.dir}" failonerror="false"/>
		<mkdir dir="${inst.dir}"/>
		<exec dir="." executable="git">
			<arg value="clone"/>
			<arg value="${gitRoot}"/>
			<arg value="${inst.dir}/"/>
		</exec>
		<ant dir="${inst.dir}" target="post" inheritall="false" useNativeBasedir="true">
		</ant>
		<copy todir="${inst.dest.dir}">
			<fileset dir="${inst.dir}/post/${ver}">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${inst.windows.installer}">
			<fileset dir="res/installer/windows/">
				<include name="jre_installer.exe"/>
				<include name="jre/**"/>
			</fileset>
		</copy> 
<!--
		<copy todir="${inst.dir}">
			<fileset dir=".">
				<include name="**"/>
			</fileset>
		</copy> 
		--> 
		<property name="offroad.version" value="${ver}"/>
		<antcall target="create_windows_installer">
			<param name="inst.windows.variant" value="installer"/>
		</antcall>
		<antcall target="create_windows_installer">
			<param name="inst.windows.variant" value="installer_java_installer_embedded"/>
		</antcall>
		<!-- Debian installer -->
		<property name="inst.debian.installer" location="${inst.dir}/res/installer/debian/offroad.equivs"/>
		<replaceregexp file="${inst.debian.installer}"
		               match="^Version:.*$"
		               replace="Version: ${ver}"
		               byline="true"/>
		<exec executable="/usr/bin/equivs-build" os="Linux" dir="${inst.dir}">
			<arg value="${inst.debian.installer}"/>
		</exec>
		<copy todir="${inst.dest.dir}">
			<fileset dir="${inst.windows.installer}/Output/">
				<include name="*.exe"/>
			</fileset>
			<fileset dir="${inst.dir}">
				<include name="*.deb"/>
			</fileset>
		</copy>
		<delete dir="${inst.dir}" failonerror="false"/> 
	</target>

</project>
